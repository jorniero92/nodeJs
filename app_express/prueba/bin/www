"use strict";


/*
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('prueba:server');
var http = require('http');

/*
 * Get port from environment and store in Express.
 */
//ve el puerto x el cual tiene que servirle 
//process.env. variable -->coge variable global de express
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//cargamos cluster
let cluster = require('cluster');

if(cluster.isMaster){
  //ver cuantas cpu's tengo
  let numCPUs = require('os').cpus().length;
  for(let i = 0; i < numCPUs; i++){
    //arranco 1 copia de cada worker
    cluster.fork();
  }
}else{
  //codigo de lo q hace cada fork
  /* Create HTTP server. */
  var server = http.createServer(app); //le paso el conjunto de midelware

  /* Listen on provided port, on all network interfaces. */
  server.listen(port);
  server.on('error', onError); //me suscribo a un evento
  server.on('listening', onListening); //si emito el evento de listening
}




/* Normalize a port into a number, string, or false. */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/*
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/*
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  //debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
